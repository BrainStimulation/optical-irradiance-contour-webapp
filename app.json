[{"name":"app.R","content":"# Load packages ----\nlibrary(shiny)\nlibrary(bslib)\nlibrary(R.matlab)\n\n# load slice data for plots\ng <- readMat(url(\"data/grey.mat\"))\nw <- readMat(url(\"data/white.mat\"))\n\n# User interface ----\nui <- page_sidebar(\n  title = \"Optogenetics Contour Visualiser [PAPER TITLE, CITATION INFO, & DOI HERE]\",\n  sidebar = sidebar(\n    title = \"Input Options\",\n    # Tissue type radio buttons\n    radioButtons(\n      \"tissue\",\n      \"Tissue Type\",\n      choices =\n        list(\"Grey matter\", \"White matter\"),\n      selected = \"Grey matter\"\n    ),\n    # Wavelength radio buttons\n    radioButtons(\n      \"wavelength\",\n      \"Wavelength (nm)\",\n      choices =\n        list(\"480\", \"580\", \"640\"),\n      selected = \"480\"\n    ),\n    # source selector\n    selectInput(\n      \"source\",\n      \"Light Source\",\n      choices =\n        list(\n          \"LED (1 µm)\",\n          \"LED (2 µm)\",\n          \"LED (5 µm)\",\n          \"LED (10 µm)\",\n          \"LED (20 µm)\",\n          \"LED (50 µm)\",\n          \"LED (100 µm)\",\n          \"LED (200 µm)\",\n          \"LED (500 µm)\",\n          \"LED (1000 µm)\",\n          \"OF (25 µm, NA 0.66)\",\n          \"OF (50 µm, NA 0.22)\",\n          \"OF (100 µm, NA 0.22)\",\n          \"OF (100 µm, NA 0.37)\",\n          \"OF (200 µm, NA 0.22)\",\n          \"OF (200 µm, NA 0.37)\",\n          \"OF (200 µm, NA 0.50)\",\n          \"OF (400 µm, NA 0.50)\",\n          \"OF (600 µm, NA 0.22)\",\n          \"OF (600 µm, NA 0.37)\"\n        ),\n      selected = \"OF (200 µm, NA 0.37)\",\n      multiple = FALSE\n    ),\n    # set power\n    numericInput(\n      \"power\",\n      \"Total Optical Power (mW)\",\n      value = 1,\n      min = 0,\n      step = 0.1\n    ),\n    # set threshold\n    numericInput(\n      \"threshold\",\n      HTML(\"Threshold Irradiance<br/>(mW/mm^2)\"),\n      value = 1,\n      min = 0,\n      step = 0.1\n    ),\n    # gridline checkbox\n    checkboxInput(\n      \"drawgridlines\",\n      \"Show Gridlines\",\n      value = TRUE\n    ),\n    # plot download button\n    downloadButton(\n      \"downloadPlot\",\n      \"Download Plot\"\n    )\n  ),\n  # plot and data cards\n  layout_columns(\n    card(\n      card_body(plotOutput(\"pdata\", width = \"100%\", height = \"500\"))\n    ),\n    card(\n      card_body(verbatimTextOutput(\"tdata\"))\n    ),\n    col_widths = c(7, 5)\n  )\n)\n\n# Server logic\nserver <- function(input, output) {\n  \n  #SLICE INDEX AND UA VALUES\n  setVars <- reactive({\n    # source index\n    si <- switch(\n      input$source,\n      \"LED (1 µm)\" = 1,\n      \"LED (2 µm)\" = 2,\n      \"LED (5 µm)\" = 3,\n      \"LED (10 µm)\" = 4,\n      \"LED (20 µm)\" = 5,\n      \"LED (50 µm)\" = 6,\n      \"LED (100 µm)\" = 7,\n      \"LED (200 µm)\" = 8,\n      \"LED (500 µm)\" = 9,\n      \"LED (1000 µm)\" = 10,\n      \"OF (25 µm, NA 0.66)\" = 11,\n      \"OF (50 µm, NA 0.22)\" = 12,\n      \"OF (100 µm, NA 0.22)\" = 13,\n      \"OF (100 µm, NA 0.37)\" = 14,\n      \"OF (200 µm, NA 0.22)\" = 15,\n      \"OF (200 µm, NA 0.37)\" = 16,\n      \"OF (200 µm, NA 0.50)\" = 17,\n      \"OF (400 µm, NA 0.50)\" = 18,\n      \"OF (600 µm, NA 0.22)\" = 19,\n      \"OF (600 µm, NA 0.37)\" = 20\n    )\n    # wavelength index\n    wi <- switch(\n      input$wavelength,\n      \"480\" = 1,\n      \"580\" = 2,\n      \"640\" = 3\n    )\n    # tissue index\n    ti <- switch(input$tissue,\n                 \"White matter\" = 1,\n                 \"Grey matter\" = 2)\n    \n    if (ti == 1) {\n      ua <- switch(\n        input$wavelength,\n        \"480\" = 0.35,\n        \"580\" = 0.19,\n        \"640\" = 0.09\n      )\n    } else {\n      ua <- switch(\n        input$wavelength,\n        \"480\" = 0.37,\n        \"580\" = 0.19,\n        \"640\" = 0.05\n      )\n    }\n    \n    # slice index\n    sliceIndex = (wi - 1) * 20 + si\n    \n    # output vector\n    vout <- c(sliceIndex, ua)\n  })\n  \n  #CONTOUR PLOT - Reactive, for display in app\n  draw_contour_r <- reactive({\n    # par(bg = \"#e0e0e0\") grey background helps visibility with true colour plots\n    pcolour <- switch(\n      input$wavelength,\n      \"480\" = \"blue\",#accurate colour is #00d5ff\n      \"580\" = \"green\",#note in reality it is yellow #ffff00\n      \"640\" = \"#ff2100\" #accurate to 640 nm\n      #https://academo.org/demos/wavelength-to-colour-relationship/\n    )\n    vars <- setVars()\n    sliceData <- switch(input$tissue,\n                        \"White matter\" = (input$power * w$white[, , vars[1]]) / (vars[2] * 0.000001),\n                        \"Grey matter\" = (input$power * g$grey[, , vars[1]]) / (vars[2] * 0.000001)\n    )\n    contour(\n      seq(-1, 1, length.out = 200),\n      seq(-1, 1, length.out = 200),\n      sliceData,\n      col = pcolour,\n      levels = input$threshold,\n      drawlabels = FALSE,\n    )\n    title(main = sprintf(\"%s in %s @ %s nm\\nPower: %.2f mW - Threshold: %.2f mW/mm^2\", input$source, input$tissue, input$wavelength, input$power, input$threshold),\n          xlab = \"Lateral spread (mm)\",\n          ylab = \"Depth (mm)\",\n          sub = \"CITATION INFO HERE\")\n    par(new=TRUE)\n    # grid lines\n    if(input$drawgridlines == TRUE){\n      abline(v=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n      abline(h=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n      abline(v=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n      abline(h=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n    }\n    # coordinates to draw source surface\n    sx <- switch(\n      input$source,\n      \"LED (1 µm)\" = c(-0.0005, 0.0005),\n      \"LED (2 µm)\" = c(-0.001, 0.001),\n      \"LED (5 µm)\" = c(-0.0025, 0.0025),\n      \"LED (10 µm)\" = c(-0.005, 0.005),\n      \"LED (20 µm)\" = c(-0.010, 0.010),\n      \"LED (50 µm)\" = c(-0.025, 0.025),\n      \"LED (100 µm)\" = c(-0.050, 0.050),\n      \"LED (200 µm)\" = c(-0.100, 0.100),\n      \"LED (500 µm)\" = c(-0.250, 0.250),\n      \"LED (1000 µm)\" = c(-0.500, 0.500),\n      \"OF (25 µm, NA 0.66)\" = c(-0.0125, 0.0125),\n      \"OF (50 µm, NA 0.22)\" = c(-0.025, 0.025),\n      \"OF (100 µm, NA 0.22)\" = c(-0.050, 0.050),\n      \"OF (100 µm, NA 0.37)\" = c(-0.050, 0.050),\n      \"OF (200 µm, NA 0.22)\" = c(-0.100, 0.100),\n      \"OF (200 µm, NA 0.37)\" = c(-0.100, 0.100),\n      \"OF (200 µm, NA 0.50)\" = c(-0.100, 0.100),\n      \"OF (400 µm, NA 0.50)\" = c(-0.200, 0.200),\n      \"OF (600 µm, NA 0.22)\" = c(-0.300, 0.300),\n      \"OF (600 µm, NA 0.37)\" = c(-0.300, 0.300)\n    )\n    sy <- c(0, 0)\n    lines(sx, sy, xlim = c(-1, 1), ylim = c(-1, 1))\n\n  })\n  \n  #CONTOUR PLOT - Function, for generating png to download\n  draw_contour_f <- function(){\n    # par(bg = \"#e0e0e0\") grey background helps visibility with true colour plots\n    pcolour <- switch(\n      input$wavelength,\n      \"480\" = \"blue\",#accurate colour is #00d5ff\n      \"580\" = \"green\",#note in reality it is yellow ffff00\n      \"640\" = \"#ff2100\" #accurate to 640 nm\n      #https://academo.org/demos/wavelength-to-colour-relationship/\n    )\n    vars <- setVars()\n    sliceData <- switch(input$tissue,\n                        \"White matter\" = (input$power * w$white[, , vars[1]]) / (vars[2] * 0.000001),\n                        \"Grey matter\" = (input$power * g$grey[, , vars[1]]) / (vars[2] * 0.000001)\n    )\n    contour(\n      seq(-1, 1, length.out = 200),\n      seq(-1, 1, length.out = 200),\n      sliceData,\n      col = pcolour,\n      levels = input$threshold,\n      drawlabels = FALSE,\n    )\n    title(main = sprintf(\"%s in %s @ %s nm\\nPower: %.2f mW - Threshold: %.2f mW/mm^2\", input$source, input$tissue, input$wavelength, input$power, input$threshold),\n          xlab = \"Lateral spread (mm)\",\n          ylab = \"Depth (mm)\",\n          sub = \"CITATION INFO HERE\")\n    par(new=TRUE)\n    # grid lines\n    if(input$drawgridlines == TRUE){\n      abline(v=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n      abline(h=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n      abline(v=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n      abline(h=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n    }\n    # coordinates to draw source surface\n    sx <- switch(\n      input$source,\n      \"LED (1 µm)\" = c(-0.0005, 0.0005),\n      \"LED (2 µm)\" = c(-0.001, 0.001),\n      \"LED (5 µm)\" = c(-0.0025, 0.0025),\n      \"LED (10 µm)\" = c(-0.005, 0.005),\n      \"LED (20 µm)\" = c(-0.010, 0.010),\n      \"LED (50 µm)\" = c(-0.025, 0.025),\n      \"LED (100 µm)\" = c(-0.050, 0.050),\n      \"LED (200 µm)\" = c(-0.100, 0.100),\n      \"LED (500 µm)\" = c(-0.250, 0.250),\n      \"LED (1000 µm)\" = c(-0.500, 0.500),\n      \"OF (25 µm, NA 0.66)\" = c(-0.0125, 0.0125),\n      \"OF (50 µm, NA 0.22)\" = c(-0.025, 0.025),\n      \"OF (100 µm, NA 0.22)\" = c(-0.050, 0.050),\n      \"OF (100 µm, NA 0.37)\" = c(-0.050, 0.050),\n      \"OF (200 µm, NA 0.22)\" = c(-0.100, 0.100),\n      \"OF (200 µm, NA 0.37)\" = c(-0.100, 0.100),\n      \"OF (200 µm, NA 0.50)\" = c(-0.100, 0.100),\n      \"OF (400 µm, NA 0.50)\" = c(-0.200, 0.200),\n      \"OF (600 µm, NA 0.22)\" = c(-0.300, 0.300),\n      \"OF (600 µm, NA 0.37)\" = c(-0.300, 0.300)\n    )\n    sy <- c(0, 0)\n    lines(sx, sy, xlim = c(-1, 1), ylim = c(-1, 1))\n  }\n  \n  #CONTOUR PLOT - renderPlot call to display in app\n  output$pdata <- renderPlot({\n   draw_contour_r()\n  }, height = 500, width = 500)\n  \n  #SUMMARY DATA\n  output$tdata <- renderText({\n    dr = 0.01 # voxel edge length in mm\n    # get current slice info\n    vars <- setVars()\n    sliceData <- switch(\n      input$tissue,\n      \"White matter\" = (input$power * w$white[, , vars[1]]) / (vars[2] * 0.000001),\n      \"Grey matter\" = (input$power * g$grey[, , vars[1]]) / (vars[2] * 0.000001)\n    )\n    # calculate summary data\n    # max irradiance\n    dmax <- max(sliceData)\n    # volume over threshold\n    mask <- sliceData >= input$threshold\n    vol <- 0\n    cs = colSums(mask)\n    for(i in (cs)){\n      vol <- vol + dr * (pi * (dr*i*0.5)^2)\n    }\n    # spread distance in mm\n    rs = rowSums(mask)\n    cfirst <- min(which(cs > 0))\n    clast <- max(which(cs > 0))\n    rfirst <- min(which(rs > 0))\n    fspread <- (clast - 100) * dr\n    bspread <- (101 - cfirst) * dr\n    if(bspread < 0){\n      bspread <- 0\n    }\n    lspread <- (101 - rfirst) * dr\n    # display data on app card\n    str_irr <- sprintf(\"Max Irradiance:\\t  %.2f mW/mm^2\", dmax)\n    str_volume <- sprintf(\"\\nVol. illuminated: %.3f mm^3\", vol)\n    str_fspread <- sprintf(\"\\nForward spread:\\t  %.2f mm\", fspread)\n    str_bspread <- sprintf(\"\\nBackward spread:  %.2f mm\", bspread)\n    str_lspread <- sprintf(\"\\nLateral spread:\\t  %.2f mm\", lspread)\n    paste(str_irr, str_volume, str_fspread, str_bspread, str_lspread)\n\n  })\n  \n  #DOWNLOAD PLOT\n  output$downloadPlot <- downloadHandler(\n    filename <- function(){\n      s_str <- switch(\n        input$source,\n        \"LED (1 µm)\" = \"L_0001\",\n        \"LED (2 µm)\" = \"L_0002\",\n        \"LED (5 µm)\" = \"L_0005\",\n        \"LED (10 µm)\" = \"L_0010\",\n        \"LED (20 µm)\" = \"L_0020\",\n        \"LED (50 µm)\" = \"L_0050\",\n        \"LED (100 µm)\" = \"L_0100\",\n        \"LED (200 µm)\" = \"L_0200\",\n        \"LED (500 µm)\" = \"L_0500\",\n        \"LED (1000 µm)\" = \"L_1000\",\n        \"OF (25 µm, NA 0.66)\" = \"F_0025_66\",\n        \"OF (50 µm, NA 0.22)\" = \"F_0050_22\",\n        \"OF (100 µm, NA 0.22)\" = \"F_0100_22\",\n        \"OF (100 µm, NA 0.37)\" = \"F_0100_37\",\n        \"OF (200 µm, NA 0.22)\" = \"F_0200_22\",\n        \"OF (200 µm, NA 0.37)\" = \"F_0200_37\",\n        \"OF (200 µm, NA 0.50)\" = \"F_0200_50\",\n        \"OF (400 µm, NA 0.50)\" = \"F_0400_50\",\n        \"OF (600 µm, NA 0.22)\" = \"F_0600_22\",\n        \"OF (600 µm, NA 0.37)\" = \"F_0600_37\"\n      )\n      t_str <- switch(\n        input$tissue,\n        \"White matter\" = \"W\",\n        \"Grey matter\" = \"G\"\n      )\n      if(input$drawgridlines == TRUE){\n        grd_str = \"on\"\n      }else{\n        grd_str = \"off\"\n      }\n      pow_str <- gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$power))\n      thr_str <- gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$threshold))\n      sprintf(\"%s_%s_%snm_P%s_T%s_G%s.png\", s_str, t_str, input$wavelength, pow_str, thr_str, grd_str)\n    },\n    content = function(file){\n      png(file)\n      draw_contour_f()\n      dev.off()\n    }\n  )\n}\n\n# Run the app\nshinyApp(ui, server)\n","type":"text"},{"name":"install.R","content":"cat(\"Installing packages, this may take a few minutes...\\n\\n\\n\\n\")\n\ninstall.packages(\"shinylive\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"shiny\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"bslib\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"R.matlab\", repos = \"http://cran.us.r-project.org\")\n\ncat(\"\\n\\nInstall complete!\")\n\n","type":"text"},{"name":"run.R","content":"cat(\"\\n\\n===============================================================\")\ncat(\"\\n\\n      Welcome to the optical irradiance contour viewer!\\n\\n\")\ncat(\"===============================================================\\n\\n\\n\\n\")\n\ncat(\"Installing packages, this may take a few minutes...\\n\\n\\n\\n\")\n\ninstall.packages(\"shiny\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"bslib\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"R.matlab\", repos = \"http://cran.us.r-project.org\")\n\ncat(\"\\n\\nInstall complete!\")\n\ncat(\"\\n\\n\\n\\n===============================================================\\n\\n\\n\\n\")\n\ncat(\"Loading app...\\n\")\ncat(\"Once you see a URL that looks like this: http://127.0.0.1:XXXX\\n\")\ncat(\"go to the URL on your browser to access the viewer.\\n\\n\")\ncat(\"You can press Ctrl+C at any time on this terminal window, or close this terminal window, to stop the app.\\n\\n\\n\\n\")\n\nlibrary(shiny)\nrunApp(\"app.R\")\n","type":"text"}]
