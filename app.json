[{"name":"app.R","content":"# Load packages ----\nlibrary(bslib)\nlibrary(jsonlite)\nlibrary(R.matlab)\nlibrary(shiny)\nlibrary(tibble)\n\ncurrent_dir <- getwd()\nabsolute_path <- file.path(current_dir, \"data/grey.mat\")\nfile_exists <- file.exists(absolute_path)\nif (file_exists) {\n  g <- readMat(\"data/grey.mat\")\n  w <- readMat(\"data/white.mat\")\n} else {\n  g <- readMat(url(\"https://brainstimulation.github.io/optical-irradiance-contour-webapp/data/grey.mat\"))\n  w <- readMat(url(\"https://brainstimulation.github.io/optical-irradiance-contour-webapp/data/white.mat\"))\n}\n# load slice data for plots\n#g <- readMat(url(\"https://brainstimulation.github.io/optical-irradiance-contour-webapp/data/grey.mat\"))\n#w <- readMat(url(\"https://brainstimulation.github.io/optical-irradiance-contour-webapp/data/white.mat\"))\n\nsource_map <- tribble(\n        ~label,            ~index, ~filename_str,   ~coordsx1, ~coordsx2,\n  #-----------------------|------|---------------|------------|--------------\n  \"LED (20 µm)\",            5,      \"L-0020\",       -0.010,     0.010,\n  \"LED (50 µm)\",            6,      \"L-0050\",       -0.025,     0.025,\n  \"LED (100 µm)\",           7,      \"L-0100\",       -0.050,     0.050,\n  \"LED (200 µm)\",           8,      \"L-0200\",       -0.100,     0.100,\n  \"LED (500 µm)\",           9,      \"L-0500\",       -0.250,     0.250,\n  \"LED (1000 µm)\",          10,     \"L-1000\",       -0.500,     0.500,\n  \"OF (25 µm, NA 0.66)\",    11,     \"F-0025-66\",    -0.0125,    0.0125,\n  \"OF (50 µm, NA 0.22)\",    12,     \"F-0050-22\",    -0.025,     0.025,\n  \"OF (100 µm, NA 0.22)\",   13,     \"F-0100-22\",    -0.050,     0.050,\n  \"OF (100 µm, NA 0.37)\",   14,     \"F-0100-37\",    -0.050,     0.050,\n  \"OF (200 µm, NA 0.22)\",   15,     \"F-0200-22\",    -0.100,     0.100,\n  \"OF (200 µm, NA 0.37)\",   16,     \"F-0200-37\",    -0.100,     0.100,\n  \"OF (200 µm, NA 0.50)\",   17,     \"F-0200-50\",    -0.100,     0.100,\n  \"OF (400 µm, NA 0.50)\",   18,     \"F-0400-50\",    -0.200,     0.200,\n  \"OF (600 µm, NA 0.22)\",   19,     \"F-0600-22\",    -0.300,     0.300,\n  \"OF (600 µm, NA 0.37)\",   20,     \"F-0600-37\",    -0.300,     0.300\n)\n\n# Workaround for Chromium download bug in shinylive\n# By default the downloadButton() function creates an <a> tag with a download \n# attribute to suggest the filename.Chromium browsers ignore this. By modifying\n# the downloadButton here, plots can be downloaded with the correct filename\n# (determined by reactive variable values) and filetype (.png).\ndownloadButton <- function(...) {\n  tag <- shiny::downloadButton(...)\n  tag$attribs$download <- NULL\n  tag\n}\n\n# User interface ----\nui <- page_sidebar(\n  title = \"Optogenetics Contour Visualiser App [PAPER TITLE, CITATION INFO, & DOI HERE]\",\n# SIDEBAR WITH INPUT OPTIONS\n  sidebar = sidebar(\n    title = \"Input Options\",\n# Tissue type radio buttons\n    radioButtons(\n      \"tissue\",\n      \"Tissue Type\",\n      choices = list(\"Grey matter\", \"White matter\"),\n      selected = \"Grey matter\"\n    ),\n# Wavelength radio buttons\n    radioButtons(\n      \"wavelength\",\n      \"Wavelength (nm)\",\n      choices = list(\"480\", \"580\", \"640\"),\n      selected = \"480\"\n    ),\n# source selector\n    selectInput(\n      \"source\",\n      \"Light Source\",\n      choices = source_map$label,\n      selected = \"OF (200 µm, NA 0.37)\",\n      multiple = FALSE\n    ),\n# set power\n    numericInput(\n      \"power\",\n      \"Total Optical Power (mW)\",\n      value = 1,\n      min = 0,\n      step = 0.1\n    ),\n# set threshold\n    numericInput(\n      \"threshold\",\n      HTML(\"Threshold Irradiance<br/>(mW/mm^2)\"),\n      value = 1,\n      min = 0,\n      step = 0.1\n    ),\n# gridline checkbox\n    checkboxInput(\"drawgridlines\", \"Show Gridlines\", value = TRUE),\n# irradiance slice on contour plot\n    checkboxInput(\"drawirrsliceline\", \"Show Irradiance Plot Location\", value = TRUE),\n# log plot for irradiance slice\n    checkboxInput(\"irrslicelogplot\", \"Logarithmic Irradiance Plot\", value = FALSE),\n# irradiance slice slider\n    sliderInput(\n      \"irrslider\",\n      \"Irradiance Plot Location\",\n      min = -1,\n      max = 1,\n      value = 0,\n      step = 0.01,\n      ticks = FALSE\n    ),\n# plot download buttons\n    downloadButton(\"downloadcontourplot\", \"Download Contour Plot\"),\n    downloadButton(\"downloadirrplot\", \"Download Irradiance Plot\")\n  ),\n# plot and data cards\n  layout_columns(\n    card(card_body(\n      plotOutput(\"pdata\", width = \"100%\", height = \"500\")\n    )),\n    card(card_body(plotOutput(\"irrplotdata\"), height = \"500\")),\n# col_widths = c(7, 5)\n  ),\n  # summary data\n  card(\n    card_body(verbatimTextOutput(\"tdata\"))\n  ),\n  card(\n    card_body(verbatimTextOutput(\"version_info\"))\n  )\n)\n# Server logic\nserver <- function(input, output) {\n  # colour of contour line\n  pcolour <- reactive({\n    req(input$wavelength)\n    colour <- switch(\n      input$wavelength,\n      \"480\" = \"blue\",\n    #accurate colour is #00d5ff\n      \"580\" = \"green\",\n    #note in reality it is yellow #ffff00\n      \"640\" = \"#ff2100\" #accurate to 640 nm\n    #https://academo.org/demos/wavelength-to-colour-relationship/\n    )\n  })\n\n  selected_source_data <- reactive({\n    req(input$source)\n    # Filter the map to find the matching row\n    source_map[source_map$label == input$source, ]\n  })\n\n  #absorption coefficient\n  ua <- reactive({\n    req(input$tissue, input$wavelength)\n    # ua\n    if (input$tissue == \"White matter\") {\n      val <- switch(\n        input$wavelength,\n        \"480\" = 0.35,\n        \"580\" = 0.19,\n        \"640\" = 0.09\n      )\n    } else {\n      val <- switch(\n        input$wavelength,\n        \"480\" = 0.37,\n        \"580\" = 0.19,\n        \"640\" = 0.05\n      )\n    }\n  })\n\n  # index to access from data arrays\n  sliceIndex <- reactive({ \n    req(input$wavelength, input$tissue, !is.null(selected_source_data()))\n    # source index\n    si <- selected_source_data()$index\n    \n    # wavelength index\n    wi <- switch(\n      input$wavelength,\n      \"480\" = 1,\n      \"580\" = 2,\n      \"640\" = 3\n    )\n    # tissue index\n    ti <- switch(input$tissue,\n                 \"White matter\" = 1,\n                 \"Grey matter\" = 2)\n\n    # slice index\n    sliceIndex = (wi - 1) * 20 + si\n  })\n\n  # array of data for contour and irradiance plots\n  sliceData <- reactive({\n    req(input$tissue, input$power, w$white, g$grey, sliceIndex, ua)\n    arr <- switch(\n      input$tissue,\n      \"White matter\" = (input$power * w$white[,, sliceIndex()]) / (ua() * 0.000001),\n      \"Grey matter\" = (input$power * g$grey[,, sliceIndex()]) / (ua() * 0.000001)\n    )\n  })\n\n  # summary data calculation for contour plot\n  cData <- reactive({ \n    req(input$threshold)  \n      # max irradiance\n      dmax <- max(sliceData())\n      # volume over threshold\n      mask <- sliceData() >= input$threshold\n      vol <- 0\n      cs = colSums(mask)\n      dr = 0.01\n      for(i in (cs)){\n        vol <- vol + dr * (pi * (dr * i * 0.5)^2)\n      }\n      # spread distance\n      rs = rowSums(mask)\n      cfirst <- min(which(cs > 0))\n      clast <- max(which(cs > 0))\n      rfirst <- min(which(rs > 0))\n      fspread <- (clast - 100) * dr #forward spread\n      bspread <- (101 - cfirst) * dr #backward spread\n      if(bspread < 0){\n        bspread <- 0\n      }\n      lspread <- (101 - rfirst) * dr #lateral spread\n      # output as vector\n      cData <- c(dmax, vol, fspread, bspread, lspread)\n    })\n  \n  # data for filenames of downloaded plot figures\n  fnameData <- reactive({\n    req(input$tissue, input$power, input$threshold, input$irrslider, input$wavelength,\n        !is.null(input$drawgridlines), !is.null(input$drawirrsliceline), !is.null(input$irrslicelogplot),\n        !is.null(selected_source_data()))\n    list(\n      source = selected_source_data()$filename_str,\n      tissue = switch(\n        input$tissue,\n        \"White matter\" = \"W\",\n        \"Grey matter\" = \"G\"\n      ),\n      wavelength = input$wavelength,\n      power = gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$power)),\n      threshold = gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$threshold)),\n      gridlines = ifelse(input$drawgridlines, \"on\", \"off\"),\n      slice_line = ifelse(input$drawirrsliceline, \"on\", \"off\"),\n      slice_location = gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$irrslider)),\n      log_lin = ifelse(input$irrslicelogplot, \"LOG\", \"LIN\")\n    )\n  })\n    \n  #CONTOUR PLOT - Function, for generating contour plot\n  draw_contour <- function(threshold, source, tissue, wavelength, power, drawgridlines, drawirrsliceline, irrslider){\n    req(threshold, source, tissue, wavelength, power, irrslider, !is.null(drawgridlines), !is.null(drawirrsliceline), !is.null(selected_source_data()))\n    # contour plot\n      contour(\n        seq(-1, 1, length.out = 200),\n        seq(-1, 1, length.out = 200),\n        sliceData(),\n        col = pcolour(),\n        levels = threshold,\n        drawlabels = FALSE,\n        xlim = c(-1, 1), \n        ylim = c(-1, 1)\n      )\n      # plot title\n      title(\n        main = sprintf(\"%s in %s @ %s nm\\nPower: %.2f mW - Threshold: %.2f mW/mm^2\", source, tissue, wavelength, power, threshold),\n        xlab = \"Lateral spread (mm)\",\n        ylab = \"Depth (mm)\",\n        sub = sprintf(\"Max Irradiance = %.2f mW/mm^2    Vol. Illuminated = %.3f mm^3\", cData()[1], cData()[2])\n      )\n      par(new=TRUE) # keep contour visible while other lines are overlaid\n      # grid lines\n      if(drawgridlines){\n        abline(v=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(h=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(v=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n        abline(h=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n      }\n      # draw source on contour plot\n      lines(\n        c(selected_source_data()$coordsx1, selected_source_data()$coordsx2), \n        c(0, 0), \n        xlim = c(-1, 1), \n        ylim = c(-1, 1)\n      )\n      # draw irradiance slice location\n      if(drawirrsliceline == TRUE){\n        lines(\n          c(irrslider, irrslider), \n          c(-1, 1), \n          #xlim = c(-1, 1), \n          #ylim = c(-1, 1),\n          col = 'purple')\n      }\n  }\n     \n  #CONTOUR PLOT - renderPlot call to display in app\n  output$pdata <- renderPlot({\n      draw_contour(\n        threshold = input$threshold,\n        source = input$source,\n        tissue = input$tissue,\n        wavelength = input$wavelength,\n        power = input$power,\n        drawgridlines = input$drawgridlines,\n        drawirrsliceline = input$drawirrsliceline,\n        irrslider = input$irrslider)\n    }\n  )\n  \n  # IRRADIANCE LINE PLOT - function\n  draw_irr <- function(irrslider, irrslicelogplot, threshold, drawgridlines){\n    req(irrslider, threshold, !is.null(irrslicelogplot), !is.null(drawgridlines))\n    sindex <- (irrslider + 1)*100 + 1\n    if(sindex > 200){\n      sindex <- 200\n    }\n    lineData <- sliceData()[sindex,]\n    \n    plot_args <- list(\n      x = lineData,\n      y = seq(-1, 1, length.out = 200),\n      main = \"Irradiance as Function of Depth\",\n      ylab = \"Depth (mm)\",\n      col = 'purple'\n    )\n    if (irrslicelogplot) {\n      plot_args$xlab <- \"Log10 Irradiance (mW/mm^2)\"\n      plot_args$log <- 'x'\n    } else {\n      plot_args$xlab <- \"Irradiance (mW/mm^2)\"\n    }\n    \n    do.call(plot, plot_args)\n\n    lines( # irradiance threshold\n      c(threshold, threshold),\n      c(-1, 1),\n      xlim = c(-1, 1),\n      ylim = c(-1, 1),\n      lty = 'dotted'\n    )\n    par(new = TRUE)\n    # grid lines\n    if (drawgridlines == TRUE) {\n      abline(h = (seq(-1, 1, length.out = 21)),\n             col = 'lightgray',\n             lty = 'dotted')\n      abline(h = (seq(-1, 1, length.out = 5)), col = 'lightgray')\n    }\n  }\n\n  # IRRADIANCE LINE PLOT - renderPlot\n  output$irrplotdata <- renderPlot({\n      draw_irr(\n        irrslider = input$irrslider,\n        irrslicelogplot = input$irrslicelogplot,\n        threshold = input$threshold,\n        drawgridlines = input$drawgridlines\n      )\n    }\n  )\n    \n  # DOWNLOAD CONTOUR PLOT\n  output$downloadcontourplot <- downloadHandler(\n    filename = function(){\n      data <- fnameData()\n      sprintf(\"%s_%s_%snm_P%s_T%s_G%s_S%s_X%smm_CONTOUR.png\", data$source, data$tissue, data$wavelength, data$power,\n              data$threshold, data$gridlines, data$slice_line, data$slice_location)\n    },\n    content = function(file) {\n      png(file, width = 1024, height = 1024, units = \"px\")\n      draw_contour(input$threshold, input$source, input$tissue, input$wavelength, input$power, input$drawgridlines, input$drawirrsliceline, input$irrslider)\n      dev.off()\n    }\n  )\n\n  # DOWNLOAD IRRADIANCE PLOT\n  output$downloadirrplot <- downloadHandler(\n    filename = function(){\n      data <- fnameData()\n      sprintf(\"%s_%s_%snm_P%s_T%s_G%s_S%s_X%smm_IRRADIANCE_%s.png\", data$source, data$tissue, data$wavelength, data$power,\n              data$threshold, data$gridlines, data$slice_line, data$slice_location, data$log_lin)\n    },\n    content = function(file){\n        png(file)\n        draw_irr(\n          irrslider = input$irrslider,\n          irrslicelogplot = input$irrslicelogplot,\n          threshold = input$threshold,\n          drawgridlines = input$drawgridlines\n        )\n        dev.off()\n      }\n  )\n\n  #SUMMARY DATA\n  output$tdata <- renderText({\n    # display data on app card\n    str_irr <- sprintf(\"Max Irradiance:\\t  %.2f mW/mm^2\", cData()[1])\n    str_volume <- sprintf(\"\\nVol. illuminated: %.3f mm^3\", cData()[2])\n    str_fspread <- sprintf(\"\\nForward spread:\\t  %.2f mm\", cData()[3])\n    str_bspread <- sprintf(\"\\nBackward spread:  %.2f mm\", cData()[4])\n    str_lspread <- sprintf(\"\\nLateral spread:\\t  %.2f mm\", cData()[5])\n    paste(str_irr, str_volume, str_fspread, str_bspread, str_lspread)\n  })\n\n  # RENDER VERSION INFO\n  output$version_info <- renderText({\n    # Initialize default values\n    build_date <- \"local\"\n    git_sha <- \"dev\"\n\n    # Read version info from the JSON file\n    # The 'try' block prevents errors if the file doesn't exist during local dev\n    try({\n      if (file_exists) {\n        version_file = \"data/version.json\"\n      } else {\n        version_file = \"version.json\"\n        download.file(\"https://brainstimulation.github.io/optical-irradiance-contour-webapp/data/version.json\", version_file)\n      }\n      version_data <- read_json(version_file)\n      build_date <- version_data$build_date\n      git_sha <- version_data$git_sha\n    }, silent = TRUE)\n\n    # Combine them into a single string\n    paste(\"Build:\", build_date, \"|\", git_sha)\n  })\n}\n\n# Run the app\napp <- shinyApp(ui = ui, server = server)\n","type":"text"},{"name":"install.R","content":"cat(\"Installing packages, this may take a few minutes...\\n\\n\\n\\n\")\n\ninstall.packages(\"shinylive\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"shiny\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"bslib\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"R.matlab\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"jsonlite\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"tibble\", repos = \"http://cran.us.r-project.org\")\n\ncat(\"\\n\\nInstall complete!\")\n","type":"text"},{"name":"prepare.R","content":"# Get the full path of the script that is currently running\n\nif (!require(\"digest\")) install.packages(\"digest\", repos = \"http://cran.us.r-project.org\")\nif (!require(\"httr\")) install.packages(\"httr\", repos = \"http://cran.us.r-project.org\")\nif (!require(\"jsonlite\")) install.packages(\"jsonlite\", repos = \"http://cran.us.r-project.org\")\n\nlibrary(digest)\nlibrary(httr)\nlibrary(jsonlite)\n\nget_figshare_md5 <- function(article_id, file_id) {\n  # Construct the API URL for file details\n  api_url <- paste0(\"https://api.figshare.com/v2/articles/\", article_id, \"/files/\", file_id)\n  \n  # Make the GET request\n  response <- GET(api_url)\n  \n  # Check for a successful response\n  if (status_code(response) == 200) {\n    # Parse the JSON content and extract the MD5 hash\n    content <- content(response, \"text\", encoding = \"UTF-8\")\n    data <- fromJSON(content)\n    return(data$computed_md5)\n  } else {\n    # Handle errors\n    warning(\"Failed to fetch metadata for file ID: \", file_id)\n    return(NULL)\n  }\n}\n\ninitial_options <- commandArgs(trailingOnly = FALSE)\nfile_arg <- \"--file=\"\nscript_path <- sub(file_arg, \"\", initial_options[grep(file_arg, initial_options)])\n\nif (length(script_path) == 0) {\n  script_path <- \".\"\n}\n\nscript_dir <- dirname(script_path)\n\ndata_dir_path <- file.path(script_dir, \"data\")\n# Create a data directory if it doesn't exist\ndir.create(data_dir_path, showWarnings = FALSE)\n\nFILES_TO_DOWNLOAD <- list(\n  grey = list(\n    article_id = 26010052,\n    file_id = 46963453,\n    dest = file.path(data_dir_path, \"grey.mat\")\n  ),\n  white = list(\n    article_id = 26010052,\n    file_id = 46963456,\n    dest = file.path(data_dir_path, \"white.mat\")\n  )\n)\n\n# Create the data directory if it doesn't exist\ndir.create(\"data\", showWarnings = FALSE)\n\n# Loop through the files and download only if necessary\nfor (name in names(FILES_TO_DOWNLOAD)) {\n  \n  file_info <- FILES_TO_DOWNLOAD[[name]]\n  cat(\"Checking file:\", file_info$dest, \"\\n\")\n  \n  should_download <- TRUE\n  \n  if (file.exists(file_info$dest)) {\n    local_hash <- digest::digest(file = file_info$dest, algo = \"md5\")\n    md5_hash <- get_figshare_md5(file_info$article_id, file_info$file_id)\n    \n    cat(\"Checking file:\", local_hash, \"\\n\")\n    cat(\"Checking file:\", md5_hash, \"\\n\")\n    \n    # !is.null(md5_hash)\n    if (local_hash == md5_hash) {\n      cat(\"  -> Hash matches. File is up to date. Skipping download.\\n\")\n      should_download <- FALSE\n    } else {\n      cat(\"local hash:\", local_hash, \"\\n\")\n      cat(\"remote hash:\", md5_hash, \"\\n\")\n      cat(\"  -> Hash mismatch! File is corrupt or outdated. Re-downloading.\\n\")\n      file.remove(file_info$dest) # Remove the bad file\n    }\n  } else {\n    cat(\"  -> File not found. Downloading.\\n\")\n  }\n  \n  if (should_download) {\n    api_url <- paste0(\"https://api.figshare.com/v2/file/download/\", file_info$file_id)\n    download.file(url = api_url, destfile = file_info$dest)\n    cat(\"  -> Download complete.\\n\")\n  }\n}\n\ncat(\"\\nData preparation is finished.\\n\")\n","type":"text"},{"name":"run.R","content":"cat(\"\\n\\n===============================================================\")\ncat(\"\\n\\n      Welcome to the optical irradiance contour viewer!\\n\\n\")\ncat(\"===============================================================\\n\\n\\n\\n\")\n\n# Get the full path of the script that is currently running\ninitial_options <- commandArgs(trailingOnly = FALSE)\nfile_arg <- \"--file=\"\nscript_path <- sub(file_arg, \"\", initial_options[grep(file_arg, initial_options)])\n\n# If the script is run interactively, this might be empty. Fallback to current dir.\nif (length(script_path) == 0) {\n  script_path <- \".\"\n}\n\n# Get the directory of the script\nscript_dir <- dirname(script_path)\n\ninstall_script_path <- file.path(script_dir, \"install.R\")\nsource(install_script_path)\n\ncat(\"\\n\\n\\n\\n===============================================================\\n\\n\\n\\n\")\n\ncat(\"Loading app...\\n\")\ncat(\"Once you see a URL that looks like this: http://127.0.0.1:XXXX\\n\")\ncat(\"go to the URL on your browser to access the viewer.\\n\\n\")\ncat(\"You can press Ctrl+C at any time on this terminal window, or close this terminal window, to stop the app.\\n\\n\\n\\n\")\n\n# Construct the full path to the app.R file\napp_path <- file.path(script_dir, \"app.R\")\n\n\nlibrary(shiny)\nrunApp(app_path)\n","type":"text"}]
