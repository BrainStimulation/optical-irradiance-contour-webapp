[{"name":"app.R","content":"# Load packages ----\nlibrary(shiny)\nlibrary(bslib)\nlibrary(R.matlab)\n# load slice data for plots\ng <- readMat(url(\"https://brainstimulation.github.io/optical-irradiance-contour-webapp/data/grey.mat\"))\nw <- readMat(url(\"https://brainstimulation.github.io/optical-irradiance-contour-webapp/data/white.mat\"))\n# User interface ----\nui <- page_sidebar(\n  title = \"Optogenetics Contour Visualiser [PAPER TITLE, CITATION INFO, & DOI HERE]\",\n  # SIDEBAR WITH INPUT OPTIONS\n  sidebar = sidebar(\n    title = \"Input Options\",\n    # Tissue type radio buttons\n    radioButtons(\n      \"tissue\",\n      \"Tissue Type\",\n      choices = list(\"Grey matter\", \"White matter\"),\n      selected = \"Grey matter\"\n    ),\n    # Wavelength radio buttons\n    radioButtons(\n      \"wavelength\",\n      \"Wavelength (nm)\",\n      choices = list(\"480\", \"580\", \"640\"),\n      selected = \"480\"\n    ),\n    # source selector\n    selectInput(\n      \"source\",\n      \"Light Source\",\n      choices =\n        list(\n          # \"LED (1 µm)\",\n          # \"LED (2 µm)\",\n          # \"LED (5 µm)\",\n          # \"LED (10 µm)\",\n          \"LED (20 µm)\",\n          \"LED (50 µm)\",\n          \"LED (100 µm)\",\n          \"LED (200 µm)\",\n          \"LED (500 µm)\",\n          \"LED (1000 µm)\",\n          \"OF (25 µm, NA 0.66)\",\n          \"OF (50 µm, NA 0.22)\",\n          \"OF (100 µm, NA 0.22)\",\n          \"OF (100 µm, NA 0.37)\",\n          \"OF (200 µm, NA 0.22)\",\n          \"OF (200 µm, NA 0.37)\",\n          \"OF (200 µm, NA 0.50)\",\n          \"OF (400 µm, NA 0.50)\",\n          \"OF (600 µm, NA 0.22)\",\n          \"OF (600 µm, NA 0.37)\"\n        ),\n      selected = \"OF (200 µm, NA 0.37)\",\n      multiple = FALSE\n    ),\n    # set power\n    numericInput(\n      \"power\",\n      \"Total Optical Power (mW)\",\n      value = 1,\n      min = 0,\n      step = 0.1\n    ),\n    # set threshold\n    numericInput(\n      \"threshold\",\n      HTML(\"Threshold Irradiance<br/>(mW/mm^2)\"),\n      value = 1,\n      min = 0,\n      step = 0.1\n    ),\n    # gridline checkbox\n    checkboxInput(\n      \"drawgridlines\",\n      \"Show Gridlines\",\n      value = TRUE\n    ),\n    # irradiance slice on contour plot\n    checkboxInput(\n      \"drawirrsliceline\",\n      \"Show Irradiance Plot Location\",\n      value = TRUE\n    ),\n    # log plot for irradiance slice\n    checkboxInput(\n      \"irrslicelogplot\",\n      \"Logarithmic Irradiance Plot\",\n      value = FALSE\n    ),\n    # irradiance slice slider\n    sliderInput(\n      \"irrslider\",\n      \"Irradiance Plot Location\",\n      min = -1,\n      max = 1,\n      value = 0,\n      step = 0.01,\n      ticks = FALSE\n    ),\n    # plot download buttons\n    downloadButton(\n      \"downloadcontourplot\",\n      \"Download Contour Plot\"\n    ),\n    downloadButton(\n      \"downloadirrplot\",\n      \"Download Irradiance Plot\"\n    )\n  ),\n  # plot and data cards\n  layout_columns(\n    card(\n      card_body(plotOutput(\"pdata\", width = \"100%\", height = \"500\"))\n    ),\n    card(\n      card_body(plotOutput(\"irrplotdata\"), height = \"500\")\n    ),\n    # col_widths = c(7, 5)\n  ),\n  \n  # summary data\n  card(\n    card_body(verbatimTextOutput(\"tdata\"))\n  )\n)\n# Server logic\nserver <- function(input, output) {\n  \n  # REACTIVE EXPRESSIONS FOR VARIABLES IN PLOTTING AND DOWNLOADING FUNCTIONS\n  \n  # colour of contour line  \n  pcolour <- reactive({\n    colour <- switch(\n      input$wavelength,\n      \"480\" = \"blue\",#accurate colour is #00d5ff\n      \"580\" = \"green\",#note in reality it is yellow #ffff00\n      \"640\" = \"#ff2100\" #accurate to 640 nm\n      #https://academo.org/demos/wavelength-to-colour-relationship/\n    )\n  })\n  \n  #absorption coefficient\n  ua <- reactive({\n    # ua\n    if (input$tissue == \"White matter\") {\n      val <- switch(\n        input$wavelength,\n        \"480\" = 0.35,\n        \"580\" = 0.19,\n        \"640\" = 0.09\n      )\n    } else {\n      val <- switch(\n        input$wavelength,\n        \"480\" = 0.37,\n        \"580\" = 0.19,\n        \"640\" = 0.05\n      )\n    }\n  })\n  \n  # index to access from data arrays\n  sliceIndex <- reactive({ \n    # source index\n    si <- switch(\n      input$source,\n      \"LED (1 µm)\" = 1,\n      \"LED (2 µm)\" = 2,\n      \"LED (5 µm)\" = 3,\n      \"LED (10 µm)\" = 4,\n      \"LED (20 µm)\" = 5,\n      \"LED (50 µm)\" = 6,\n      \"LED (100 µm)\" = 7,\n      \"LED (200 µm)\" = 8,\n      \"LED (500 µm)\" = 9,\n      \"LED (1000 µm)\" = 10,\n      \"OF (25 µm, NA 0.66)\" = 11,\n      \"OF (50 µm, NA 0.22)\" = 12,\n      \"OF (100 µm, NA 0.22)\" = 13,\n      \"OF (100 µm, NA 0.37)\" = 14,\n      \"OF (200 µm, NA 0.22)\" = 15,\n      \"OF (200 µm, NA 0.37)\" = 16,\n      \"OF (200 µm, NA 0.50)\" = 17,\n      \"OF (400 µm, NA 0.50)\" = 18,\n      \"OF (600 µm, NA 0.22)\" = 19,\n      \"OF (600 µm, NA 0.37)\" = 20\n    )\n    # wavelength index\n    wi <- switch(\n      input$wavelength,\n      \"480\" = 1,\n      \"580\" = 2,\n      \"640\" = 3\n    )\n    # tissue index\n    ti <- switch(\n      input$tissue,\n      \"White matter\" = 1,\n      \"Grey matter\" = 2\n    )\n    \n    # slice index\n    sliceIndex = (wi - 1) * 20 + si\n  })\n  \n  # array of data for contour and irradiance plots\n  sliceData <- reactive({ \n    arr <- switch(\n      input$tissue,\n      \"White matter\" = (input$power * w$white[, , sliceIndex()]) / (ua() * 0.000001),\n      \"Grey matter\" = (input$power * g$grey[, , sliceIndex()]) / (ua() * 0.000001)\n    )\n  })\n    \n  # x coordinates to plot source on contour plot\n  sx <- reactive({ \n      val <- switch(\n        input$source,\n        \"LED (1 µm)\" = c(-0.0005, 0.0005),\n        \"LED (2 µm)\" = c(-0.001, 0.001),\n        \"LED (5 µm)\" = c(-0.0025, 0.0025),\n        \"LED (10 µm)\" = c(-0.005, 0.005),\n        \"LED (20 µm)\" = c(-0.010, 0.010),\n        \"LED (50 µm)\" = c(-0.025, 0.025),\n        \"LED (100 µm)\" = c(-0.050, 0.050),\n        \"LED (200 µm)\" = c(-0.100, 0.100),\n        \"LED (500 µm)\" = c(-0.250, 0.250),\n        \"LED (1000 µm)\" = c(-0.500, 0.500),\n        \"OF (25 µm, NA 0.66)\" = c(-0.0125, 0.0125),\n        \"OF (50 µm, NA 0.22)\" = c(-0.025, 0.025),\n        \"OF (100 µm, NA 0.22)\" = c(-0.050, 0.050),\n        \"OF (100 µm, NA 0.37)\" = c(-0.050, 0.050),\n        \"OF (200 µm, NA 0.22)\" = c(-0.100, 0.100),\n        \"OF (200 µm, NA 0.37)\" = c(-0.100, 0.100),\n        \"OF (200 µm, NA 0.50)\" = c(-0.100, 0.100),\n        \"OF (400 µm, NA 0.50)\" = c(-0.200, 0.200),\n        \"OF (600 µm, NA 0.22)\" = c(-0.300, 0.300),\n        \"OF (600 µm, NA 0.37)\" = c(-0.300, 0.300)\n      )\n    })\n  \n  # summary data calculation for contour plot\n  cData <- reactive({ \n      # max irradiance\n      dmax <- max(sliceData())\n      # volume over threshold\n      mask <- sliceData() >= input$threshold\n      vol <- 0\n      cs = colSums(mask)\n      dr = 0.01\n      for(i in (cs)){\n        vol <- vol + dr * (pi * (dr*i*0.5)^2)\n      }\n      # spread distance\n      rs = rowSums(mask)\n      cfirst <- min(which(cs > 0))\n      clast <- max(which(cs > 0))\n      rfirst <- min(which(rs > 0))\n      fspread <- (clast - 100) * dr #forward spread\n      bspread <- (101 - cfirst) * dr #backward spread\n      if(bspread < 0){\n        bspread <- 0\n      }\n      lspread <- (101 - rfirst) * dr #lateral spread\n      # output as vector\n      cData <- c(dmax, vol, fspread, bspread, lspread)\n    })\n  \n  # data for filenames of downloaded plot figures\n  fnameData <- reactive({\n      s_str <- switch(\n        input$source,\n        \"LED (1 µm)\" = \"L-0001\",\n        \"LED (2 µm)\" = \"L-0002\",\n        \"LED (5 µm)\" = \"L-0005\",\n        \"LED (10 µm)\" = \"L-0010\",\n        \"LED (20 µm)\" = \"L-0020\",\n        \"LED (50 µm)\" = \"L-0050\",\n        \"LED (100 µm)\" = \"L-0100\",\n        \"LED (200 µm)\" = \"L-0200\",\n        \"LED (500 µm)\" = \"L-0500\",\n        \"LED (1000 µm)\" = \"L-1000\",\n        \"OF (25 µm, NA 0.66)\" = \"F-0025-66\",\n        \"OF (50 µm, NA 0.22)\" = \"F-0050-22\",\n        \"OF (100 µm, NA 0.22)\" = \"F-0100-22\",\n        \"OF (100 µm, NA 0.37)\" = \"F-0100-37\",\n        \"OF (200 µm, NA 0.22)\" = \"F-0200-22\",\n        \"OF (200 µm, NA 0.37)\" = \"F-0200-37\",\n        \"OF (200 µm, NA 0.50)\" = \"F-0200-50\",\n        \"OF (400 µm, NA 0.50)\" = \"F-0400-50\",\n        \"OF (600 µm, NA 0.22)\" = \"F-0600-22\",\n        \"OF (600 µm, NA 0.37)\" = \"F-0600-37\"\n      )\n      t_str <- switch(\n        input$tissue,\n        \"White matter\" = \"W\",\n        \"Grey matter\" = \"G\"\n      )\n      if(input$drawgridlines == TRUE){\n        grd_str = \"on\"\n      }else{\n        grd_str = \"off\"\n      }\n      if(input$drawirrsliceline == TRUE){\n        irr_str = \"on\"\n      }else{\n        irr_str = \"off\"\n      }\n      \n      pow_str <- gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$power))\n      thr_str <- gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$threshold))\n      irr_loc_str <- gsub(\"\\\\.\", \"-\", sprintf(\"%.2f\", input$irrslider))\n      fnameData <- c(s_str, t_str, input$wavelength, pow_str, thr_str, grd_str, irr_str, irr_loc_str)\n    })\n    \n  #CONTOUR PLOT - Reactive, for display in app\n  draw_contour_r <- reactive({\n      # contour plot\n      contour(\n        seq(-1, 1, length.out = 200),\n        seq(-1, 1, length.out = 200),\n        sliceData(),\n        col = pcolour(),\n        levels = input$threshold,\n        drawlabels = FALSE,\n      )\n      # plot title\n      title(\n        main = sprintf(\"%s in %s @ %s nm\\nPower: %.2f mW - Threshold: %.2f mW/mm^2\", input$source, input$tissue, input$wavelength, input$power, input$threshold),\n        xlab = \"Lateral spread (mm)\",\n        ylab = \"Depth (mm)\",\n        sub = sprintf(\"Max Irradiance = %.2f mW/mm^2    Vol. Illuminated = %.3f mm^3\", cData()[1], cData()[2])\n      )\n      par(new=TRUE) # keep contour visible while other lines are overlaid\n      # grid lines\n      if(input$drawgridlines == TRUE){\n        abline(v=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(h=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(v=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n        abline(h=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n      }\n      # draw source on contour plot\n      lines(\n        sx(), \n        c(0, 0), \n        xlim = c(-1, 1), \n        ylim = c(-1, 1))\n      # draw irradiance slice location\n      if(input$drawirrsliceline == TRUE){\n        lines(\n          c(input$irrslider, input$irrslider), \n          c(-1, 1), \n          xlim = c(-1, 1), \n          ylim = c(-1, 1),\n          col = 'purple')\n      }\n    })\n    \n  #CONTOUR PLOT - Function, for generating png to download\n  draw_contour_f <- function(){\n      # contour plot\n      contour(\n        seq(-1, 1, length.out = 200),\n        seq(-1, 1, length.out = 200),\n        sliceData(),\n        col = pcolour(),\n        levels = input$threshold,\n        drawlabels = FALSE,\n      )\n      # plot title\n      title(\n        main = sprintf(\"%s in %s @ %s nm\\nPower: %.2f mW - Threshold: %.2f mW/mm^2\", input$source, input$tissue, input$wavelength, input$power, input$threshold),\n        xlab = \"Lateral spread (mm)\",\n        ylab = \"Depth (mm)\",\n        sub = sprintf(\"Max Irradiance = %.2f mW/mm^2    Vol. Illuminated = %.3f mm^3\", cData()[1], cData()[2])\n      )\n      par(new=TRUE) # keep contour visible while other lines are overlaid\n      # grid lines\n      if(input$drawgridlines == TRUE){\n        abline(v=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(h=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(v=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n        abline(h=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n      }\n      # draw source on contour plot\n      lines(\n        sx(), \n        c(0, 0), \n        xlim = c(-1, 1), \n        ylim = c(-1, 1))\n      # draw irradiance slice location\n      if(input$drawirrsliceline == TRUE){\n        lines(\n          c(input$irrslider, input$irrslider), \n          c(-1, 1), \n          xlim = c(-1, 1), \n          ylim = c(-1, 1),\n          col = 'purple')\n      }\n    }\n    \n  #CONTOUR PLOT - renderPlot call to display in app\n  output$pdata <- renderPlot({\n      draw_contour_r()\n    }, height = 500, width = 500)\n    \n  # IRRADIANCE LINE PLOT - reactive\n  draw_irr_r <- reactive({\n      sindex <- (input$irrslider + 1)*100 + 1\n      if(sindex > 200){\n        sindex <- 200\n      }\n      lineData <- sliceData()[sindex,]\n      if(input$irrslicelogplot == TRUE){\n        plot( # irradiance profile\n          lineData,\n          seq(-1, 1, length.out = 200),\n          main = \"Irradiance as Function of Depth\",\n          xlab = \"Log10 Irradiance (mW/mm^2)\",\n          ylab = \"Depth (mm)\",\n          col = 'purple',\n          log='x'\n          # sub = \"CITATION INFO HERE\" \n        )\n      }else{\n        plot( # irradiance profile\n          lineData,\n          seq(-1, 1, length.out = 200),\n          main = \"Irradiance as Function of Depth\",\n          xlab = \"Irradiance (mW/mm^2)\",\n          ylab = \"Depth (mm)\",\n          col = 'purple',\n          # sub = \"CITATION INFO HERE\" \n        )\n      }\n      lines( # irradiance threshold\n        c(input$threshold, input$threshold),\n        c(-1, 1),\n        xlim = c(-1, 1),\n        ylim = c(-1, 1),\n        lty = 'dotted'\n      )\n      par(new=TRUE)\n      # grid lines\n      if(input$drawgridlines == TRUE){\n        abline(h=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(h=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n      }\n    })\n    \n  # IRRADIANCE LINE PLOT - function\n  draw_irr_f <- function(){\n      sindex <- (input$irrslider + 1)*100 + 1\n      if(sindex > 200){\n        sindex <- 200\n      }\n      lineData <- sliceData()[sindex,]\n      if(input$irrslicelogplot == TRUE){\n        plot( # irradiance profile\n          lineData,\n          seq(-1, 1, length.out = 200),\n          main = \"Irradiance as Function of Depth\",\n          xlab = \"Log10 Irradiance (mW/mm^2)\",\n          ylab = \"Depth (mm)\",\n          col = 'purple',\n          log='x'\n          # sub = \"CITATION INFO HERE\" \n        )\n      }else{\n        plot( # irradiance profile\n          lineData,\n          seq(-1, 1, length.out = 200),\n          main = \"Irradiance as Function of Depth\",\n          xlab = \"Irradiance (mW/mm^2)\",\n          ylab = \"Depth (mm)\",\n          col = 'purple',\n          # sub = \"CITATION INFO HERE\" \n        )\n      }\n      lines( # irradiance threshold\n        c(input$threshold, input$threshold),\n        c(-1, 1),\n        xlim = c(-1, 1),\n        ylim = c(-1, 1),\n        lty = 'dotted'\n      )\n      par(new=TRUE)\n      # grid lines\n      if(input$drawgridlines == TRUE){\n        abline(h=(seq(-1, 1, length.out = 21)), col = 'lightgray', lty = 'dotted')\n        abline(h=(seq(-1, 1, length.out = 5)), col = 'lightgray')\n      }\n    }\n    \n  # IRRADIANCE LINE PLOT - renderPlot\n  output$irrplotdata <- renderPlot({\n      draw_irr_r()\n    }, height = 500, width = 500)\n    \n  # DOWNLOAD CONTOUR PLOT\n  output$downloadcontourplot <- downloadHandler(\n      filename <- function(){\n        sprintf(\"%s_%s_%snm_P%s_T%s_G%s_S%s_X%smm_CONTOUR.png\", fnameData()[1], fnameData()[2], fnameData()[3], fnameData()[4], fnameData()[5], fnameData()[6], fnameData()[7], fnameData()[8])\n      },\n      content = function(file){\n        png(file)\n        draw_contour_f()\n        dev.off()\n      }\n  )\n    \n  # DOWNLOAD IRRADIANCE PLOT\n  output$downloadirrplot <- downloadHandler(\n    filename <- function(){\n      if(input$irrslicelogplot == TRUE){\n        sprintf(\"%s_%s_%snm_P%s_T%s_G%s_S%s_X%smm_IRRADIANCE_LOG.png\", fnameData()[1], fnameData()[2], fnameData()[3], fnameData()[4], fnameData()[5], fnameData()[6], fnameData()[7], fnameData()[8])\n      }else{\n        sprintf(\"%s_%s_%snm_P%s_T%s_G%s_S%s_X%smm_IRRADIANCE_LIN.png\", fnameData()[1], fnameData()[2], fnameData()[3], fnameData()[4], fnameData()[5], fnameData()[6], fnameData()[7], fnameData()[8])\n      }\n    },\n    content = function(file){\n        png(file)\n        draw_irr_f()\n        dev.off()\n      }\n  )\n    \n  #SUMMARY DATA\n  output$tdata <- renderText({\n      # display data on app card\n      str_irr <- sprintf(\"Max Irradiance:\\t  %.2f mW/mm^2\", cData()[1])\n      str_volume <- sprintf(\"\\nVol. illuminated: %.3f mm^3\", cData()[2])\n      str_fspread <- sprintf(\"\\nForward spread:\\t  %.2f mm\", cData()[3])\n      str_bspread <- sprintf(\"\\nBackward spread:  %.2f mm\", cData()[4])\n      str_lspread <- sprintf(\"\\nLateral spread:\\t  %.2f mm\", cData()[5])\n      paste(str_irr, str_volume, str_fspread, str_bspread, str_lspread)\n      \n    })\n}\n# Run the app\napp <- shinyApp(ui = ui, server = server)\nrunApp(app)\n","type":"text"},{"name":"install.R","content":"cat(\"Installing packages, this may take a few minutes...\\n\\n\\n\\n\")\n\ninstall.packages(\"shinylive\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"shiny\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"bslib\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"R.matlab\", repos = \"http://cran.us.r-project.org\")\n\ncat(\"\\n\\nInstall complete!\")\n\n","type":"text"},{"name":"run.R","content":"cat(\"\\n\\n===============================================================\")\ncat(\"\\n\\n      Welcome to the optical irradiance contour viewer!\\n\\n\")\ncat(\"===============================================================\\n\\n\\n\\n\")\n\ncat(\"Installing packages, this may take a few minutes...\\n\\n\\n\\n\")\n\ninstall.packages(\"shiny\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"bslib\", repos = \"http://cran.us.r-project.org\")\ninstall.packages(\"R.matlab\", repos = \"http://cran.us.r-project.org\")\n\ncat(\"\\n\\nInstall complete!\")\n\ncat(\"\\n\\n\\n\\n===============================================================\\n\\n\\n\\n\")\n\ncat(\"Loading app...\\n\")\ncat(\"Once you see a URL that looks like this: http://127.0.0.1:XXXX\\n\")\ncat(\"go to the URL on your browser to access the viewer.\\n\\n\")\ncat(\"You can press Ctrl+C at any time on this terminal window, or close this terminal window, to stop the app.\\n\\n\\n\\n\")\n\nlibrary(shiny)\nrunApp(\"app.R\")\n","type":"text"}]
